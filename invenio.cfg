"""
InvenioRDM settings for OneClimate project.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""

from datetime import datetime
from flask_babelex import lazy_gettext as _

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# SECURITY WARNING: keep the secret key used in production secret!
# Do not commit it to a source code repository.
# TODO: Set
SECRET_KEY="$SECRET_KEY"

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ['', 'localhost']


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# TODO: Set
SQLALCHEMY_DATABASE_URI="postgresql+psycopg2://<db>:<>@localhost/<>"

# admin user password
RDM_RECORDS_USER_FIXTURE_PASSWORDS = {
     <user>: <pwd>
     }
#

# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://flask-babel.tkte.ch/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Australia/Sydney'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    # ('de', _('German')),
    # ('tr', _('Turkish')),
]


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Frontpage title
THEME_FRONTPAGE_TITLE = "Australia Climate Data Guide Catalogue" 
# Header logo
THEME_LOGO = 'images/ACDG-logo_v2.png'


# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

# TODO: Set with your own hostname when deploying to production
SITE_UI_URL = ""

SITE_API_URL = ""

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": ("The Creative Commons Attribution license allows "
                            "re-distribution and re-use of a licensed work "
                            "on the condition that the creator is "
                            "appropriately credited."),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "languages": [
      { 
        "id": "eng",
        "title": {
          "en": "English"
        }
      }
    ],
    "additional_descriptions": [
        {
          "description": ("Where is the dataset locally available, list all sources"),
          "type": {
                    "id": "location"
                  },
          "lang": { "id": "eng",
                    "title": {"en": "English"} }
        },
        {
          "id": "citation-access",
          "description": ("Use this is you have extra access information or for records with no doi to display citation otherwise remove!"),
          "type": {
                    "id": "citation-access"
                  },
          "lang": { "id": "eng",
                    "title": {"en": "English"} },
        }
    ],
    "publisher": "Not available",
}

# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = 'search' # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = True
DATACITE_USERNAME = "..."
DATACITE_PASSWORD = "..."
DATACITE_PREFIX = "10.local-id"
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""
HANDLE_PREFIX = ""

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = False # require users to confirm email before being able to login

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = False  # allow users to change profile info (name, email, etc...)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "oai:oneclimate.org"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = "oneclimate-"

COMMUNITIES_RECORDS_SEARCH = {
     "facets": ["resource_type", "subject"],
     "sort": ["bestmatch", "newest", "oldest", "version"]
}
# Invenio facets
#

# Community requests search configuration (i.e list of community requests)"""

RDM_SEARCH_USER_COMMUNITIES = {
    "facets": ["visibility", "type"],
    "sort": ["bestmatch", "newest", "oldest"],
}
# User communities search configuration (i.e list of user communities)"""

#RDM_SEARCH_USER_REQUESTS = {
#    "facets": ["type", "status"],
#    "sort": ["bestmatch", "newest", "oldest"],
#}
# User requests search configuration (i.e list of user requests)"""

RDM_SEARCH = {
     "facets": ["resource_type", "frequency", "resolution",
                "realm", "region", "format", "subject_nested"],
     "sort": ["bestmatch", "newest", "oldest", "version"]
     }

RDM_SEARCH_DRAFTS = {
     "facets": ["is_published", "resource_type", "frequency", "resolution"],
               # "realm", "region", "format", "subject_nested"],
     "sort": ["bestmatch", "newest", "oldest", "version"]
     }
#
# disable api rate limit if you have to reload all records
#RATELIMIT_ENABLED = False

# 
from datetime import datetime, timedelta
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    "indexer": {
        "task": "invenio_records_resources.tasks.manage_indexer_queues",
        "schedule": timedelta(seconds=20),
    },
    "accounts_sessions": {
        "task": "invenio_accounts.tasks.clean_session_table",
        "schedule": timedelta(minutes=60),
    },
    "accounts_ips": {
        "task": "invenio_accounts.tasks.delete_ips",
        "schedule": timedelta(hours=6),
    },
    "draft_resources": {
        "task": ("invenio_drafts_resources.services.records.tasks.cleanup_drafts"),
        "schedule": timedelta(minutes=60),
    },
    "rdm_records": {
        "task": "invenio_rdm_records.services.tasks.update_expired_embargos",
        "schedule": crontab(minute=20, hour=0),
    },
    "expire_requests": {
        "task": "invenio_requests.tasks.check_expired_requests",
        "schedule": crontab(minute=30, hour=0),
    },
}
# declare custom fields

#from invenio_vocabularies.services.custom_fields import TextCF, VocabularyCF
from invenio_vocabularies.services.custom_fields import VocabularyCF
from marshmallow_utils.fields import SanitizedHTML

RDM_CUSTOM_FIELDS = [
    VocabularyCF(
        name="frequency",  
        vocabulary_id="frequencies",  # as defined in vocabularies.yaml file
        dump_options=True,  # True when the list of all possible values will be visible in the dropdown UI component, typically for small vocabularies
        multiple=True, # if the field accepts a list of values (True) or single value (False)
    ),
    VocabularyCF(
        name="resolution",
        vocabulary_id="resolutions",
        dump_options=True,
        multiple=True,
    ),
    VocabularyCF(
        name="region",
        vocabulary_id="regions",
        dump_options=True,
        multiple=True,
    ),
    VocabularyCF(
        name="realm",
        vocabulary_id="realms",
        dump_options=True,
        multiple=True,
    ),
    VocabularyCF(
        name="format",
        vocabulary_id="formats",
        dump_options=True,
        multiple=True,
    ),
]

# for the above configured fields `cern:experiment`, `cern:experiment_description_html`, `cern:experiment_url`
RDM_CUSTOM_FIELDS_UI = [
    {
        "section": _("Keywords"),
        "fields": [
            dict(
                field="resolution",
                ui_widget="Dropdown",
                props=dict(
                    label="Geospatial resolution",
                    placeholder="NA",
                    icon="tag",
                    description="Provide geospatial resolution for dataset whenever possible using GCMD based vocabulary",
                    search=True,  # True for autocomplete dropdowns with search functionality
                    multiple=True,   # True for selecting multiple values
                    clearable=True,
                    required=False,
                )
            ),
            dict(
                field="frequency",
                ui_widget="Dropdown",
                props=dict(
                    label="Frequency",
                    placeholder="NA",
                    icon="tag",
                    description="Provide frequency for dataset whenever possible using GMD based vocabulary",
                    search=True,  # True for autocomplete dropdowns with search functionality
                    multiple=True,   # True for selecting multiple values
                    clearable=True,
                    required=False,
                )
            ),
            dict(
                field="region",
                ui_widget="Dropdown",
                props=dict(
                    label="Region",
                    placeholder="NA",
                    icon="tag",
                    description="Provide region for dataset whenever possible using GMD based vocabulary",
                    search=True,  # True for autocomplete dropdowns with search functionality
                    multiple=True,   # True for selecting multiple values
                    clearable=True,
                    required=False,
                )
            ),
            dict(
                field="realm",
                ui_widget="Dropdown",
                props=dict(
                    label="Variables realm",
                    placeholder="NA",
                    icon="tag",
                    description="Provide variables' realm for dataset whenever possible using a CMOR based vocabulary",
                    search=True,  # True for autocomplete dropdowns with search functionality
                    multiple=True,   # True for selecting multiple values
                    clearable=True,
                    required=False,
                )
            ),
            dict(
                field="format",
                ui_widget="Dropdown",
                props=dict(
                    label="Files format",
                    placeholder="NA",
                    icon="tag",
                    description="Provide file format for dataset and/or code whenever possible using provided vocabulary",
                    search=True,  # True for autocomplete dropdowns with search functionality
                    multiple=True,   # True for selecting multiple values
                    clearable=True,
                    required=False,
                )
            ),
        ]
    }
]

from invenio_rdm_records.config import RDM_FACETS #, RDM_SEARCH
from invenio_records_resources.services.records.facets import CFTermsFacet, NestedTermsFacet
from invenio_records_resources.services.records.facets.facets import CFNestedTermsFacet
from invenio_vocabularies.services.facets import VocabularyLabels

RDM_FACETS = {
    **RDM_FACETS,
#    "region": {
#        "facet": CFNestedTermsFacet(  # backend facet
#            field="region",  # id is the keyword field of a vocabulary
#            subfield="region.id",  # id is the keyword field of a vocabulary
#            label=_("Region"),
#            value_labels=VocabularyLabels("regions")
#        ),
#        "ui": {  # ui display
#            "field": CFNestedTermsFacet.subfield("region.id"),
#        },
#    },
    "frequency": {
        "facet": CFTermsFacet(  # backend facet
            field="frequency.id",  # id is the keyword field of a vocabulary
            label=_("Frequency"),
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field("frequency.id"),
        },
    },
    "resolution": {
        "facet": CFTermsFacet(  # backend facet
            field="resolution.id",  # id is the keyword field of a vocabulary
            label=_("Resolution"),
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field("resolution.id"),
        },
    },
    "realm": {
        "facet": CFTermsFacet(  # backend facet
            field="realm.id",  # id is the keyword field of a vocabulary
            label=_("Realm"),
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field("realm.id"),
        },
    },
    "region": {
        "facet": CFTermsFacet(  # backend facet
            field="region.id",  # id is the keyword field of a vocabulary
            label=_("Region"),
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field("region.id"),
        },
    },
    "format": {
        "facet": CFTermsFacet(  # backend facet
            field="format.id",  # id is the keyword field of a vocabulary
            label=_("Format"),
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field("format.id"),
        },
    },
}
